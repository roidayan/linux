From: Alaa Hleihel <alaa@mellanox.com>
Subject: [PATCH] BACKPORT: qib

Signed-off-by: Alaa Hleihel <alaa@mellanox.com>
---
 drivers/infiniband/hw/qib/qib_pcie.c |   43 ++++++++++++++++++++++++++++++++++
 1 files changed, 43 insertions(+), 0 deletions(-)

diff --git a/drivers/infiniband/hw/qib/qib_pcie.c b/drivers/infiniband/hw/qib/qib_pcie.c
index xxxxxxx..xxxxxxx xxxxxx
--- a/drivers/infiniband/hw/qib/qib_pcie.c
+++ b/drivers/infiniband/hw/qib/qib_pcie.c
@@ -197,26 +197,43 @@ static void qib_msix_setup(struct qib_devdata *dd, int pos, u32 *msixcnt,
 			   struct qib_msix_entry *qib_msix_entry)
 {
 	int ret;
+#ifdef HAVE_PCI_ENABLE_MSIX_RANGE
 	int nvec = *msixcnt;
+#else
+	u32 tabsize = 0;
+	u16 msix_flags;
+#endif
 	struct msix_entry *msix_entry;
 	int i;
 
+#ifdef HAVE_PCI_ENABLE_MSIX_RANGE
 	ret = pci_msix_vec_count(dd->pcidev);
 	if (ret < 0)
 		goto do_intx;
 
 	nvec = min(nvec, ret);
+#endif
 
 	/* We can't pass qib_msix_entry array to qib_msix_setup
 	 * so use a dummy msix_entry array and copy the allocated
 	 * irq back to the qib_msix_entry array. */
+#ifdef HAVE_PCI_ENABLE_MSIX_RANGE
 	msix_entry = kmalloc(nvec * sizeof(*msix_entry), GFP_KERNEL);
 	if (!msix_entry)
 		goto do_intx;
 
 	for (i = 0; i < nvec; i++)
+#else
+	msix_entry = kmalloc(*msixcnt * sizeof(*msix_entry), GFP_KERNEL);
+	if (!msix_entry) {
+		ret = -ENOMEM;
+		goto do_intx;
+	}
+	for (i = 0; i < *msixcnt; i++)
+#endif
 		msix_entry[i] = qib_msix_entry[i].msix;
 
+#ifdef HAVE_PCI_ENABLE_MSIX_RANGE
 	ret = pci_enable_msix_range(dd->pcidev, msix_entry, 1, nvec);
 	if (ret < 0)
 		goto free_msix_entry;
@@ -224,9 +241,29 @@ static void qib_msix_setup(struct qib_devdata *dd, int pos, u32 *msixcnt,
 		nvec = ret;
 
 	for (i = 0; i < nvec; i++)
+#else
+	pci_read_config_word(dd->pcidev, pos + PCI_MSIX_FLAGS, &msix_flags);
+	tabsize = 1 + (msix_flags & PCI_MSIX_FLAGS_QSIZE);
+	if (tabsize > *msixcnt)
+		tabsize = *msixcnt;
+	ret = pci_enable_msix(dd->pcidev, msix_entry, tabsize);
+	if (ret > 0) {
+		tabsize = ret;
+		ret = pci_enable_msix(dd->pcidev, msix_entry, tabsize);
+	}
+do_intx:
+	if (ret) {
+		qib_dev_err(dd,
+				"pci_enable_msix %d vectors failed: %d, falling back to INTx\n",
+				tabsize, ret);
+		tabsize = 0;
+	}
+	for (i = 0; i < tabsize; i++)
+#endif
 		qib_msix_entry[i].msix = msix_entry[i];
 
 	kfree(msix_entry);
+#ifdef HAVE_PCI_ENABLE_MSIX_RANGE
 	*msixcnt = nvec;
 	return;
 
@@ -238,6 +275,12 @@ do_intx:
 			"falling back to INTx\n", nvec, ret);
 	*msixcnt = 0;
 	qib_enable_intx(dd->pcidev);
+#else
+	*msixcnt = tabsize;
+
+	if (ret)
+		qib_enable_intx(dd->pcidev);
+#endif
 }
 
 /**
