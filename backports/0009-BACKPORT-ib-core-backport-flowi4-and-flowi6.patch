From: Vladimir Sokolovsky <vlad@mellanox.com>
Subject: [PATCH] BACKPORT: ib/core backport flowi4 and flowi6

Change-Id: Ib60003524802c5a17860c6ea25cef7c9230db146
Signed-off-by: Vladimir Sokolovsky <vlad@mellanox.com>
Signed-off-by: Roi Dayan <roid@mellanox.com>
---
 drivers/infiniband/core/addr.c |   47 ++++++++++++++++++++++++++++++++++++++++
 1 files changed, 47 insertions(+), 0 deletions(-)

diff --git a/drivers/infiniband/core/addr.c b/drivers/infiniband/core/addr.c
index xxxxxxx..xxxxxxx xxxxxx
--- a/drivers/infiniband/core/addr.c
+++ b/drivers/infiniband/core/addr.c
@@ -223,9 +223,15 @@ static int addr4_resolve(struct sockaddr_in *src_in,
 	__be32 src_ip = src_in->sin_addr.s_addr;
 	__be32 dst_ip = dst_in->sin_addr.s_addr;
 	struct rtable *rt;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,39)
 	struct flowi4 fl4;
+#else
+	struct flowi fl;
+	struct neighbour *neigh;
+#endif
 	int ret;
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,39)
 	memset(&fl4, 0, sizeof(fl4));
 	fl4.daddr = dst_ip;
 	fl4.saddr = src_ip;
@@ -235,10 +241,25 @@ static int addr4_resolve(struct sockaddr_in *src_in,
 		ret = PTR_ERR(rt);
 		goto out;
 	}
+#else
+	memset(&fl, 0, sizeof(fl));
+	fl.nl_u.ip4_u.daddr = dst_ip;
+	fl.nl_u.ip4_u.saddr = src_ip;
+	fl.oif = addr->bound_dev_if;
+	ret = ip_route_output_key(&init_net, &rt, &fl);
+	if (ret)
+		goto out;
+#endif
 	src_in->sin_family = AF_INET;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,39)
 	src_in->sin_addr.s_addr = fl4.saddr;
 
 	if (rt->dst.dev->flags & IFF_LOOPBACK) {
+#else
+	src_in->sin_addr.s_addr = rt->rt_src;
+
+	if (rt->idev->dev->flags & IFF_LOOPBACK) {
+#endif
 		ret = rdma_translate_ip((struct sockaddr *) dst_in, addr);
 		if (!ret)
 			memcpy(addr->dst_dev_addr, addr->src_dev_addr, MAX_ADDR_LEN);
@@ -288,10 +309,16 @@ static int addr6_resolve(struct sockaddr_in6 *src_in,
 			 struct sockaddr_in6 *dst_in,
 			 struct rdma_dev_addr *addr)
 {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,39)
 	struct flowi6 fl6;
+#else
+	struct flowi fl;
+	struct neighbour *neigh;
+#endif
 	struct dst_entry *dst;
 	int ret;
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,39)
 	memset(&fl6, 0, sizeof fl6);
 	fl6.daddr = dst_in->sin6_addr;
 	fl6.saddr = src_in->sin6_addr;
@@ -310,6 +337,26 @@ static int addr6_resolve(struct sockaddr_in6 *src_in,
 		src_in->sin6_family = AF_INET6;
 		src_in->sin6_addr = fl6.saddr;
 	}
+#else
+	memset(&fl, 0, sizeof fl);
+	ipv6_addr_copy(&fl.fl6_dst, &dst_in->sin6_addr);
+	ipv6_addr_copy(&fl.fl6_src, &src_in->sin6_addr);
+	fl.oif = addr->bound_dev_if;
+
+	dst = ip6_route_output(&init_net, NULL, &fl);
+	if ((ret = dst->error))
+		goto put;
+
+	if (ipv6_addr_any(&fl.fl6_src)) {
+		ret = ipv6_dev_get_saddr(&init_net, ip6_dst_idev(dst)->dev,
+					 &fl.fl6_dst, 0, &fl.fl6_src);
+		if (ret)
+			goto put;
+
+		src_in->sin6_family = AF_INET6;
+		ipv6_addr_copy(&src_in->sin6_addr, &fl.fl6_src);
+	}
+#endif
 
 	if (dst->dev->flags & IFF_LOOPBACK) {
 		ret = rdma_translate_ip((struct sockaddr *) dst_in, addr);
